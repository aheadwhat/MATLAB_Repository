function [f, mu] = MGSP(L,y,beta, gamma, maxIter, tol)
% 
% . This function implements the algorithm of 'Multiple Graphs Label
% . Propagation by Sparse Integration' 
%   
% . Parameters
% . --------------- 
% . INPUT
% . L: 1xK cell array containing multiple graph Laplician matrices 
% . note: here assume all components in L are normalized
% . 
% . y: nx1 vector, the initial labeled vector for label propagation
% . 
% . beta and gamma: positve scalar, the constants predefined to 
% . balance the effect of each component of the target function
% . 
% . 
% . RETURN
% . f: nx1 vector, the predicted labels
% . mu: Kx1 vector, the predicted weights
% 

if nargin < 2
    error('cell array and initial y are both needed!');
end
if nargin < 3 || isempty(beta)
    beta = 0.01;  % compel coef to be sparse
end
if nargin < 4 || isempty(gamma)
    gamma = 0.1;
end
if nargin < 5 || isempty(maxIter)
    disp('default max iteration: 10000');
    maxIter = 10000;
end 
if nargin < 6 || isempty(tol)
    tol = 1e-10;
end

if gamma <= 0 || beta < 0
    error('this program just handles the positive instances')
end

K = size(L,2); % #(graph laplacians)
mu = zeros(K,1) + 1/K;  % initial weights
n = size(L{1},1); % #(samples)
tol_mu = sqrt(K) * tol;
tol_f = sqrt(n) * tol;

mu_pre = inf(K,1);

f_pre = inf(n,1);

for t = 1:maxIter
%     wL_tmp = cellfun(@(x,y)x.*y, L,mu, 'UniformOutput', false);
    wL = zeros(n);
    for k = 1:K
        wL = wL + L{k}.*mu(k);
    end
    f = beta *((beta * eye(n) + wL)\y);
    

    v = arrayfun(@(x) f'*L{x}*f, 1:K);
    
    v_so = sort(v);
    v_cs = cumsum(v_so);
    eta = arrayfun(@(x)(gamma + v_cs(x))./x, 1:K);

    
    v_so(K + 1) = inf;
    for i = 1:K
        if eta(i) > v_so(i) && eta(i) <= v_so(i + 1)
            m = i;
            break;
        end
        
    end
        
        

    for i = 1:K
        if eta(m) > v(i)
            mu(i) = (eta(m) - v(i))/gamma; 
        else
            mu(i) = 0;
        end
        
    end
   
   
    if norm(mu_pre - mu) < tol_mu && norm(f_pre - f) < tol_f
        fprintf('stopped after %f iterations \n', t);
        break
    else
        mu_pre = mu;
        f_pre = f;
    end
    
    if t == maxIter
        disp('max iterating times achieves.');
    end
      
end

end

