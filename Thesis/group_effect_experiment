function group_effect_experiment
%
% group effect test for MGSPwG
% fixed beta and view mu as a function of gamma
%
clf;
rng(1,'twister');

dataname = 'twomoons';
gamma = [linspace(0.1,1,10), linspace(2,10,5)]; % range of gamma

lb_rate = 0.1;    % labeled rate
ngroup = 4;       % #(source of graphs)
partition = 5;    % #(split times of each graph)
isrescaled = true; % indicate whether to normalize the graph laplacian or not
noiselevel = 0.1;  % 0.1, 0.2
fprintf('%s , noiselevel: %1.3f\n',dataname, noiselevel);
[data, y] = make_twomoons(400,true,noiselevel,1);  % the seed is set to 1
%     colormap([0.2422 0.1504 0.6603; %purple
%         0 0.5000 0.4000]) %green
%     scatter(data(:,1),data(:,2),12,y);
% %     hold on;

% generate graph fragments
% graph construction
% [L, W] = distMat(data, dist, param, knn,rescale,Ltype)
% total ngroup(e.g. 4) kinds: gaussian, cosine, cityblock, noise
% split every graph into a predefined number of components

% relative graphs
clear W;
[~,W{1}] = distMat(data, 'gaussian', 1, 3, isrescaled);
[~,W{2}] = distMat(data, 'cosine', [], 3, isrescaled);
[~,W{3}] = distMat(data, 'cityblock', [], 3, isrescaled);

% noisy graph construction
n = size(data, 1);
rW = rand(n,n);
rW = (rW + rW')./2;
rW(eye(n) == 1) = 0; %% for lgc type
W{4} = rW;

if size(W, 2) ~= ngroup
    error('check the number of groups');
end

W = split_graph(W, partition);
L = cell(size(W));
ngraph = partition * ngroup;

for i = 1: ngraph
    D = diag(1./sqrt(max(sum(W{i},2),0.01)));  % avoid 0/0
    L{i} = eye(n) - D*W{i}*D;
    if isrescaled
        L{i} = L{i}/norm(L{i}, 'fro');
    end
end


if isrescaled
    disp('the output graph laplacians are rescaled');
else
    disp('the rescaling operation is not carried out');
end

G = cell(1, ngroup);
for i = 1:ngroup
    G{i} = ((i - 1)*partition + 1):(i*partition);
end

% randomly choose pre-defined percentage of labels to be seen
lb_idx = randperm(length(y));
lb_idx = lb_idx(1:round(n*lb_rate));

Y = y;
ul_idx = setdiff(1:n, lb_idx);
Y(ul_idx) = 0;

ntrail = length(gamma);

errResults = zeros(1,ntrail);
weightResults = zeros(ntrail, ngraph);
mu_0 = zeros(ngraph,1) + 1/ngraph; 
f_0 = Y;

for trail = 1:ntrail
    
    fprintf('gamma : %1.4f :\n', gamma(trail));
    
    % %%% usage: [f, mu] = MGSPwG(L, y, G, beta, gamma, mu_0, f_0, maxIter, tol)
    [f, mu] = MGSPwG(L, Y, G, 0.1, gamma(trail), mu_0, f_0);
    mu_0 = mu;
    f_0 = f;
    f(f>=0) = 1;
    f(f<0) = -1;
    errResults(1, trail) = mean(f(ul_idx)~=y(ul_idx));
    mu(mu < 1e-5) = 0;
    % % the average error may be biased, use the following auc as an
    % % alternative
    %f_ul = f(ul_idx);
    %y_ul = y(ul_idx);
    %[~,~,~,auc] = perfcurve(y_ul,f_ul,1);
    weightResults(trail, :) = mu;
    
end

errResults
weightResults
mean(errResults,2)

save(strcat(dataname,num2str(noiselevel),'group_lbr',num2str(lb_rate),'.mat'), ...
    'errResults', 'weightResults');



%%
clf;
rng(1,'twister');

dataname = 'twocircles';
gamma = [linspace(0.1,1,10), linspace(2,10,5)]; % range of gamma

lb_rate = 0.1;    % labeled rate
ngroup = 4;       % #(source of graphs)
partition = 5;    % #(split times of each graph)
isrescaled = true; % indicate whether to normalize the graph laplacian or not

noiselevel = 0.03;  % 0.03, 0.06
fprintf('%s , noiselevel: %1.3f\n',dataname, noiselevel);
[data, y] = make_circles(400,true,noiselevel,1);  % the seed is set to 1
%     colormap([0.2422 0.1504 0.6603; %purple
%         0 0.5000 0.4000]) %green
%     scatter(data(:,1),data(:,2),12,y);
% %     hold on;

% generate graph fragments
% graph construction
% [L, W] = distMat(data, dist, param, knn,rescale,Ltype)
% total ngroup(e.g. 4) kinds: gaussian, cosine, cityblock, noise
% split every graph into a predefined number of components

% relative graphs
clear W;
[~,W{1}] = distMat(data, 'gaussian', 1, 3, isrescaled);
[~,W{2}] = distMat(data, 'cosine', [], 3, isrescaled);
[~,W{3}] = distMat(data, 'cityblock', [], 3, isrescaled);

% noisy graph construction
n = size(data, 1);
rW = rand(n,n);
rW = (rW + rW')./2;
rW(eye(n) == 1) = 0; %% for lgc type
W{4} = rW;

if size(W, 2) ~= ngroup
    error('check the number of groups');
end

W = split_graph(W, partition);
L = cell(size(W));
ngraph = partition * ngroup;

for i = 1: ngraph
    D = diag(1./sqrt(max(sum(W{i},2),0.01)));
    L{i} = eye(n) - D*W{i}*D;
    if isrescaled
        L{i} = L{i}/norm(L{i}, 'fro');
    end
end


if isrescaled
    disp('the output graph laplacians are rescaled');
else
    disp('the rescaling operation is not carried out');
end

G = cell(1, ngroup);
for i = 1:ngroup
    G{i} = ((i - 1)*partition + 1):(i*partition);
end

% randomly choose pre-defined percentage of labels to be seen
lb_idx = randperm(length(y));
lb_idx = lb_idx(1:round(n*lb_rate));

Y = y;
ul_idx = setdiff(1:n, lb_idx);
Y(ul_idx) = 0;


ntrail = length(gamma);

errResults = zeros(1,ntrail);
weightResults = zeros(ntrail, ngraph);
mu_0 = zeros(ngraph,1) + 1/ngraph; 
f_0 = Y;

for trail = 1:ntrail
    
    fprintf('gamma : %1.4f :\n', gamma(trail));
    
    % %%% usage: [f, mu] = MGSPwG(L, y, G, beta, gamma, mu_0, f_0, maxIter, tol)
    [f, mu] = MGSPwG(L, Y, G, 0.1, gamma(trail), mu_0, f_0);
    mu_0 = mu;
    f_0 = f;
    f(f>=0) = 1;
    f(f<0) = -1;
    errResults(1, trail) = mean(f(ul_idx)~=y(ul_idx));
    mu(mu < 1e-5) = 0;
    weightResults(trail, :) = mu;
    
end

errResults
weightResults
mean(errResults,2)

save(strcat(dataname,num2str(noiselevel),'group_lbr',num2str(lb_rate),'.mat'), ...
    'errResults', 'weightResults');

%%
% version 3: for WebKB
clf;
rng(1,'twister');

dataname = 'WebKB';
gamma = [linspace(0.1,1,10), linspace(5,25,5)]; % range of gamma

lb_rate = 0.1;     % labeled rate
ngroup_r = 2;      % #(source of related graphs)
ngroup_n = 1;      % #(source of noise graphs)
nsubgraph = 6;     % #(graphs of each source)
isrescaled = true; % indicate whether to normalize the graph laplacian or not

% load data
fprintf('%s , labelratio: %1.3f\n',dataname, lb_rate);
addpath data;
load('PAGE.mat', 'X', 'Y');
X1 = X;
y = Y;
load('LINK.mat', 'X', 'Y');
X2 = X;


% sum up graphs
ngraph_r = ngroup_r * nsubgraph;
ngraph = ngraph_r + ngroup_n * nsubgraph;
% construct the group
ngroup = ngroup_r + ngroup_n;

G = cell(1, ngroup);
for i = 1:ngroup
    G{i} = ((i - 1)*nsubgraph + 1):(i*nsubgraph);
end

% relative graphs
clear L;
L = cell(1, ngraph);

% for the first source
data = X1;
% L{1} = distMat(data, 'gaussian', 1, 1, isrescaled);
% L{2} = distMat(data, 'gaussian', 1, 2, isrescaled);
% L{3} = distMat(data, 'gaussian', 1, 3, isrescaled);
% L{4} = distMat(data, 'gaussian', 1, 4, isrescaled);
% L{5} = distMat(data, 'gaussian', 1, 5, isrescaled);
L{1} = distMat(data, 'cosine', [], 1, isrescaled);
L{2} = distMat(data, 'cosine', [], 3, isrescaled);
L{3} = distMat(data, 'cosine', [], 5, isrescaled);
L{4} = distMat(data, 'euclidean', [], 1, isrescaled);
L{5} = distMat(data, 'euclidean', [], 3, isrescaled);
L{6} = distMat(data, 'euclidean', [], 5, isrescaled);


% for the second source
tmp = nsubgraph;
data = X2;
% L{1 + tmp} = distMat(data, 'gaussian', 1, 1, isrescaled);
% L{2 + tmp} = distMat(data, 'gaussian', 1, 2, isrescaled);
% L{3 + tmp} = distMat(data, 'gaussian', 1, 3, isrescaled);
% L{4 + tmp} = distMat(data, 'gaussian', 1, 4, isrescaled);
% L{5 + tmp} = distMat(data, 'gaussian', 1, 5, isrescaled);
L{1 + tmp} = distMat(data, 'cosine', [], 1, isrescaled);
L{2 + tmp} = distMat(data, 'cosine', [], 3, isrescaled);
L{3 + tmp} = distMat(data, 'cosine', [], 5, isrescaled);
L{4 + tmp} = distMat(data, 'euclidean', [], 1, isrescaled);
L{5 + tmp} = distMat(data, 'euclidean', [], 3, isrescaled);
L{6 + tmp} = distMat(data, 'euclidean', [], 5, isrescaled);


n = size(data, 1);
% irrelatvie graphs
% usage: [L,W] = noisygraph(data, gType, dist, knn,isrescaled,seed)
% type I: random noise version
for i = (ngraph_r + 1) : (ngraph)
    rW = rand(n,n);
    rW = (rW + rW')./2;
    rW(eye(n) == 1) = 0; % for lgc type
    D = diag(1./sqrt(sum(rW,2)));
    L{i} = eye(n) - D*rW*D;
    if isrescaled
        L{i} = L{i}/norm(L{i}, 'fro');
    end
end

if size(L, 2) ~= ngraph
    error('check the number of graphs!');
end

if isrescaled
    disp('the output graph laplacians are rescaled');
else
    disp('the rescaling operation is not carried out');
end


% randomly choose pre-defined percentage of labels to be seen
y_tmp1 = find(y > 0);
y_tmp2 = find(y < 0);
n1 = length(y_tmp1);
n2 = length(y_tmp2);
lb_idx_1 = randperm(n1);
lb_idx_1 = lb_idx_1(1:round(n1*lb_rate));
lb_idx_2 = randperm(n2);
lb_idx_2 = lb_idx_2(1:round(n2*lb_rate));
lb_idx = [lb_idx_1,lb_idx_2];

Y = y;
ul_idx = setdiff(1:n, lb_idx);
Y(ul_idx) = 0;

%%
ntrail = length(gamma);

errResults = zeros(1,ntrail);
weightResults = zeros(ntrail, ngraph);
mu_0 = zeros(ngraph,1) + 1/ngraph; 
f_0 = Y;
% mu_0 = weightResults(10,:)'; 
% f_0 = tmp_f;

% newly added
fResults = zeros(ntrail,n);

for trail = 1:ntrail
    
    fprintf('gamma : %1.4f :\n', gamma(trail));
    
    % %%% usage: [f, mu] = MGSPwG(L, y, G, beta, gamma, mu_0, f_0, maxIter, tol)
%     [f, mu] = MGSPwG(L, Y, G, 0.1, gamma(trail), mu_0, f_0);
    [f, mu] = SMGIG_PM(L, Y, G, 0.1, gamma(trail), mu_0, f_0);
    mu_0 = mu;
    f_0 = f;
%     f(f>=0) = 1;
%     f(f<0) = -1;
%     errResults(1, trail) = mean(f(ul_idx)~=y(ul_idx));
%     mu(mu < 1e-5) = 0;
    % % the average error may be biased, use the following auc as an
    % % alternative
    f_ul = f(ul_idx);
    y_ul = y(ul_idx);
    [~,~,~,auc] = perfcurve(y_ul,f_ul,1);
    errResults(1, trail) = auc;
    weightResults(trail, :) = mu;
    
    % added
    fResults(trail,:) = f;
    
end

errResults
weightResults
mean(errResults,2)

save(strcat('pm_',dataname,'group_lbr',num2str(lb_rate),'.mat'), ...
    'errResults', 'weightResults','gamma');





end

function Ws = split_graph(W,partition)
    % W is a cell array, each cell contains one similarity matrix
    % partition is a scalar indicating how many times for a graph to split
    ngroup = size(W,2);
    nsample = size(W{1},1);
    rand_idx = randperm(nsample);
    split_idx = round(linspace(1,nsample,partition + 1));
    Ws = cell(1, ngroup * partition);
    for i = 1:ngroup
        W_tmp = W{i};
          for j = 1:partition
              idx_tmp = zeros(nsample);
              idx_tmp(rand_idx(split_idx(j):split_idx(j+1)),:) = 1;
              idx_tmp(:,rand_idx(split_idx(j):split_idx(j+1))) = 1;
              Ws{partition * (i - 1) + j} = W_tmp .* idx_tmp;
              
          end
        
    end
  
    
end
